{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Jupiter","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"微机原理第一章-微型计算机概述","slug":"微机原理第一章-微型计算机概述","date":"2020-03-01T09:17:50.000Z","updated":"2020-03-01T10:21:41.189Z","comments":true,"path":"2020/03/01/微机原理第一章-微型计算机概述/","link":"","permalink":"http://yoursite.com/2020/03/01/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%BF%B0/","excerpt":"","text":"今天开始我将此博客作为自己的读书笔记及对语言学习的记录，希望能够得到各位的支持。（基于川大何小海老师所著《微机原理》） 微机原理：第一章：微型计算机概述 概念引入： 位（bit）：最小的数据单元，两种状态0和1 字（word）：数据处理的基本单位 字长：每一个字所包含的二进制个数 字节（byte）:相邻的八位二进制数称为一个字节（1 byte = 8 bit) 计算机中数的表示方法 基：每个数位上可用的字符个数 //十进制为0~9，基数为10 权：每一位上所对应的权，跟自身所处位置有关。 数制之间的相互转换 1）十进制转换为二进制 整数除二取余，小数乘二取整 //推荐西安电子科技大学周佳社老师的方法，b站：微机原理-数制与码制 2）十进制转换为十六进制 整数除16取余，小数乘16取整 3）十六进制转换为二进制 每一位16进制数用相应的4位二进制数表示 //这里展现了引入16进制和二进制数的必要，为后面8086的运作方式埋下了伏笔 4）二进制转换为八进制 整数部分小数点向左每三位为一组，小数部分小数点向右每三位为一组（三位二进制数所对应的八进制数），位数不足，自行补零 //这个比较简单，理解透彻就行 5）二进制转换为十六进制 整数部分小数点向右每四位为一组，小数部分小数点向右每四位为一组（四位二进制数所对应的十六进制数），位数不足，自行补零 //类似于八进制 计算机中常用编码 1）BCD码 //发明这个编码的人真的是天才，后面在用到BCD码的时候，你就会发现将BCD码引入巧妙的解决数与数之间的运算，使计算机能够进行十进制计算。 优点：与十进制数转换方便 缺点；用BCD码表示的十进制数要比纯二进制表示的十进制数位更长 //这里可以理解位BCD码每四位表示一个十进制数，故所用位更多（原本四位二进制数可以表示0~15） 十进制调整 1、两个BCD数相加结果大于1001（大于十进制数9），做加0110（加6） 2、两个BCD数相加产生进位（十进制运算大于16），做加0110（加6） //加6修正很好理解，原本四位二进制数能够表示16个数而现在却只表示了10个数，故在进行加减的时候若出现以上两种情况，进行加六修正 2）字符编码 ASCII码：简单阅览即可 3）汉字编码 国标码：了解即可 计算机中带符号数的表示方法 1）数的符号表示法 机器数：带有数码化的正负号的数为机器数 //约定机器数的最高位为其符号位 0为正，1为负 2）原码、反码、补码 正数原码 = 反码 = 补码 负数反码：符号位不变，其余位取反 负数补码：符号位为1 ，反码加1 溢出：超出数表示范围 3）数的小数点表示法 1、定点表示：小数点位置人为规定 2、浮点表示","categories":[],"tags":[]}]}