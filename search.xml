<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微机原理第二章：微处理器与总线（一、微处理器结构）</title>
    <url>/2020/03/04/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%8E%E6%80%BB%E7%BA%BF%EF%BC%88%E4%B8%80%E3%80%81%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<hr>
<p>一、8086/8088的内部结构<br>        执行部件EU：指令的译码、执行和数据运算<br>总线接口部件BIU（bus interface unit）：管理CPU与系统总线接口、负责CPU对存储器和外设进行访问</p>
<hr>
<p>二、寄存器组（8个通用寄存器、四个段寄存器、一个标志寄存器、一个指令指针    寄存器）<br>        1）八个通用16位寄存器<br>                数据寄存器：AX、BX、CX、DX<br>                AX：累加器（accumulator）-用于算术、逻辑运算以及同外设传送数据<br>                BX：基址寄存器（base address register）-存放存储器地址<br>                CX：计数器（counter）-循环及窜操作指令中隐含的计数器<br>                DX：数据寄存器（data register）-存放双字长数据的高位、外设端口地址<br>                SI：源地址寄存器（source index）- 存储器变址寻址时提供地址<br>                DI：目的地址寄存器（destination index）-存储器变址寻址时提供地址<br>                SP：堆栈指针寄存器（stack pointer）-堆栈栈顶地址（偏移地址）<br>                BP：基址指针寄存器（base pointer）-堆栈段中的基地址<br>注：堆栈按照先进后出的原则，相信语言学习者都能了解，这里不过多赘述<br>                IP：指令指针寄存器（instruction pointer）-指示主存储器指令的位置、随指令执行，IP自动修改指示下一条指令所在存储器位置<br>                PSW：程序状态字寄存器（flags）-状态标志：</p>
<hr>
<p>CF：进位标志（carry flag）最高位有进位或借位置1<br>ZF：零标志（zero flag）结果为零置1<br>SF：符号标志（sign flag）最高位（符号位）为1时置1<br>PF：奇偶标志（parity flag）运算结果中最低字节（低八位）中1的个数，个数为偶数时置1<br>OF：溢出标志（overflow flag）运算结果有溢出置1<br>AF：辅助进位标志位（auxiliary parity flag）D3位有进位/借位置1</p>
<hr>
<p>控制标志：（控制处理器执行命令的方式）<br>DF：方向标志（direction flag）置1自动减少、置0自动增加<br>IF：终端允许（interrupt-enable flag）置1允许中段//中段的概念不赘述<br>TF：陷阱标志（trap flag）置一处理器单步操作 //这里在调试中很有用（Debug模式）<br>段寄存器：<br>CS （code segment）代码段寄存器-指明当前代码段起始地址<br>DS（data segment）数据段寄存器-指明当前数据段起始地址<br>ES（exit segment）附加段寄存器-指明当前附加段起始地址<br>SS（stack segment）堆栈段寄存器-指明当前堆栈段起始地址    </p>
<hr>
<p>物理地址：1MB储存区域的某一单元的实际地址<br>逻辑地址：由段基地址和偏移地址组成<br>段基地址：逻辑段在主存储器中的起始地址<br>偏移地址：某段内指定存储单元到段基地址的距离<br>物理地址PA=段基地址*16+偏移地址</p>
]]></content>
  </entry>
  <entry>
    <title>微机原理第一章-微型计算机概述</title>
    <url>/2020/03/01/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>今天开始我将此博客作为自己的读书笔记及对语言学习的记录，希望能够得到各位的支持。<br>（基于川大何小海老师所著《微机原理》）</p>
<hr>
<p>微机原理：<br>第一章：微型计算机概述<br>    概念引入：<br>  位（bit）：最小的数据单元，两种状态0和1<br>  字（word）：数据处理的基本单位<br>  字长：每一个字所包含的二进制个数<br>  字节（byte）:相邻的八位二进制数称为一个字节（1 byte = 8 bit)</p>
<hr>
<p>计算机中数的表示方法<br>  基：每个数位上可用的字符个数    //十进制为0~9，基数为10<br>  权：每一位上所对应的权，跟自身所处位置有关。</p>
<hr>
<p>数制之间的相互转换</p>
<p>  1）十进制转换为二进制<br>    整数除二取余，小数乘二取整    //推荐西安电子科技大学周佳社老师的方法，b站：微机原理-数制与码制<br>  2）十进制转换为十六进制<br>    整数除16取余，小数乘16取整<br>  3）十六进制转换为二进制<br>    每一位16进制数用相应的4位二进制数表示    //这里展现了引入16进制和二进制数的必要，为后面8086的运作方式埋下了伏笔<br>  4）二进制转换为八进制<br>    整数部分小数点向左每三位为一组，小数部分小数点向右每三位为一组（三位二进制数所对应的八进制数），位数不足，自行补零    //这个比较简单，理解透彻就行<br>  5）二进制转换为十六进制<br>    整数部分小数点向右每四位为一组，小数部分小数点向右每四位为一组（四位二进制数所对应的十六进制数），位数不足，自行补零    //类似于八进制</p>
<hr>
<p>计算机中常用编码<br>  1）BCD码    //发明这个编码的人真的是天才，后面在用到BCD码的时候，你就会发现将BCD码引入巧妙的解决数与数之间的运算，使计算机能够进行十进制计算。<br>    优点：与十进制数转换方便<br>    缺点；用BCD码表示的十进制数要比纯二进制表示的十进制数位更长    //这里可以理解位BCD码每四位表示一个十进制数，故所用位更多（原本四位二进制数可以表示0~15）<br>    十进制调整<br>      1、两个BCD数相加结果大于1001（大于十进制数9），做加0110（加6）<br>      2、两个BCD数相加产生进位（十进制运算大于16），做加0110（加6）    //加6修正很好理解，原本四位二进制数能够表示16个数而现在却只表示了10个数，故在进行加减的时候若出现以上两种情况，进行加六修正<br>  2）字符编码<br>    ASCII码：简单阅览即可<br>  3）汉字编码<br>    国标码：了解即可</p>
<hr>
<p>计算机中带符号数的表示方法<br>  1）数的符号表示法<br>    机器数：带有数码化的正负号的数为机器数    //约定机器数的最高位为其符号位<br>    0为正，1为负<br>  2）原码、反码、补码<br>    正数原码 = 反码 = 补码<br>    负数反码：符号位不变，其余位取反<br>    负数补码：符号位为1 ，反码加1<br>    溢出：超出数表示范围<br>  3）数的小数点表示法<br>    1、定点表示：小数点位置人为规定<br>    2、浮点表示</p>
]]></content>
  </entry>
</search>
